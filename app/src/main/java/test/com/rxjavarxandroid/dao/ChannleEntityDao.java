package test.com.rxjavarxandroid.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import test.com.rxjavarxandroid.entity.ChannleEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHANNLE_ENTITY".
*/
public class ChannleEntityDao extends AbstractDao<ChannleEntity, Void> {

    public static final String TABLENAME = "CHANNLE_ENTITY";

    /**
     * Properties of entity ChannleEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ChnId = new Property(0, Long.class, "chnId", false, "CHN_ID");
        public final static Property Chan_name = new Property(1, String.class, "chan_name", false, "CHAN_NAME");
        public final static Property Create_time = new Property(2, Long.class, "create_time", false, "CREATE_TIME");
        public final static Property Sort = new Property(3, Integer.class, "sort", false, "SORT");
        public final static Property Chn_type = new Property(4, Integer.class, "chn_type", false, "CHN_TYPE");
        public final static Property Url = new Property(5, String.class, "url", false, "URL");
    };


    public ChannleEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ChannleEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHANNLE_ENTITY\" (" + //
                "\"CHN_ID\" INTEGER," + // 0: chnId
                "\"CHAN_NAME\" TEXT," + // 1: chan_name
                "\"CREATE_TIME\" INTEGER," + // 2: create_time
                "\"SORT\" INTEGER," + // 3: sort
                "\"CHN_TYPE\" INTEGER," + // 4: chn_type
                "\"URL\" TEXT);"); // 5: url
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHANNLE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChannleEntity entity) {
        stmt.clearBindings();
 
        Long chnId = entity.getChnId();
        if (chnId != null) {
            stmt.bindLong(1, chnId);
        }
 
        String chan_name = entity.getChan_name();
        if (chan_name != null) {
            stmt.bindString(2, chan_name);
        }
 
        Long create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindLong(3, create_time);
        }
 
        Integer sort = entity.getSort();
        if (sort != null) {
            stmt.bindLong(4, sort);
        }
 
        Integer chn_type = entity.getChn_type();
        if (chn_type != null) {
            stmt.bindLong(5, chn_type);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChannleEntity entity) {
        stmt.clearBindings();
 
        Long chnId = entity.getChnId();
        if (chnId != null) {
            stmt.bindLong(1, chnId);
        }
 
        String chan_name = entity.getChan_name();
        if (chan_name != null) {
            stmt.bindString(2, chan_name);
        }
 
        Long create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindLong(3, create_time);
        }
 
        Integer sort = entity.getSort();
        if (sort != null) {
            stmt.bindLong(4, sort);
        }
 
        Integer chn_type = entity.getChn_type();
        if (chn_type != null) {
            stmt.bindLong(5, chn_type);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ChannleEntity readEntity(Cursor cursor, int offset) {
        ChannleEntity entity = new ChannleEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // chnId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // chan_name
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // create_time
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // sort
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // chn_type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // url
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChannleEntity entity, int offset) {
        entity.setChnId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setChan_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreate_time(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setSort(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setChn_type(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ChannleEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ChannleEntity entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
